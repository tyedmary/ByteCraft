public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}


int age = 25;
double height = 5.9;
char gender = 'M';
String name = "John";
boolean isStudent = true;



int a = 10;
int b = 5;
int sum = a + b;
int difference = a - b;
int product = a * b;
double quotient = (double) a / b;
int remainder = a % b;



int x = 10;
if (x > 0) {
    System.out.println("Positive");
} else if (x < 0) {
    System.out.println("Negative");
} else {
    System.out.println("Zero");
}



for (int i = 0; i < 5; i++) {
    System.out.println("Iteration: " + i);
}


int[] numbers = {1, 2, 3, 4, 5};
String[] names = {"Alice", "Bob", "Charlie"};



public int add(int a, int b) {
    return a + b;
}




class Person {
    String name;
    int age;
}
Person person1 = new Person();
person1.name = "Alice";
person1.age = 30;




class Animal {
    void eat() {
        System.out.println("Animal is eating.");
    }
}
class Dog extends Animal {
    void bark() {
        System.out.println("Dog is barking.");
    }
}



Animal animal = new Dog();
animal.eat(); // This will call Dog's eat method if overridden



class Account {
    private double balance;
    public void deposit(double amount) {
        balance += amount;
    }
    public double getBalance() {
        return balance;
    }
}



interface Printable {
    void print();
}
class Document implements Printable {
    public void print() {
        System.out.println("Printing document...");
    }
}



try {
    // code that may throw an exception
} catch (Exception e) {
    // handle the exception
} finally {
    // optional, cleanup code
}
import java.io.File;
import java.io.FileWriter;
try {
    FileWriter writer = new FileWriter("file.txt");
    writer.write("Hello, World!");
    writer.close();
} catch (Exception e) {
    e.printStackTrace();
}



import java.util.ArrayList;
ArrayList<String> list = new ArrayList<>();
list.add("Apple");
list.add("Banana");
list.add("Orange");



import java.util.HashSet;
HashSet<String> set = new HashSet<>();
set.add("Apple");
set.add("Banana");
set.add("Orange");

import java.io.File;
import java.io.FileWriter;
try {
    FileWriter writer = new FileWriter("file.txt");
    writer.write("Hello, World!");
    writer.close();
} catch (Exception e) {
    e.printStackTrace();
}



import java.util.ArrayList;
ArrayList<String> list = new ArrayList<>();
list.add("Apple");
list.add("Banana");
list.add("Orange");



import java.util.HashSet;
HashSet<String> set = new HashSet<>();
set.add("Apple");
set.add("Banana");
set.add("Orange");

import java.util.HashMap;
HashMap<String, Integer> map = new HashMap<>();
map.put("Apple", 10);
map.put("Banana", 5);
map.put("Orange", 8);

import java.util.Arrays;
int[] numbers = {5, 2, 8, 1, 9};
Arrays.sort(numbers);


import java.util.Collections;
ArrayList<Integer> list = new ArrayList<>();
list.add(5);
list.add(2);
list.add(8);
Collections.sort(list);



ArrayList<Integer> list = new ArrayList<>();
list.forEach((n) -> System.out.println(n));




import java.util.stream.IntStream;
IntStream.range(1, 5).forEach(System.out::println);


import java.util.regex.Pattern;
Pattern pattern = Pattern.compile("ab+c");


class MyThread extends Thread {
    public void run() {
        System.out.println("Thread running...");
    }
}
MyThread thread = new MyThread();
thread.start();

class MyRunnable implements Runnable {
    public void run() {
        System.out.println("Runnable running...");
    }
}
Thread thread = new Thread(new MyRunnable());
thread.start();


import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
ExecutorService executor = Executors.newFixedThreadPool(5);
executor.submit(() -> System.out.println("Task executed."));
executor.shutdown();



import java.lang.reflect.Method;
class MyClass {
    public void myMethod() {
        System.out.println("My Method");
    }
}
Method method = MyClass.class.getMethod("myMethod");


import java.io.Serializable;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
class MyClass implements Serializable {
    // class definition
}
MyClass obj = new MyClass();
FileOutputStream fileOut = new FileOutputStream("object.ser");
ObjectOutputStream out = new ObjectOutputStream(fileOut);
out.writeObject(obj);
out.close();
fileOut.close();
